clear;
clc;
%% Generating Source File:

% Loding the input file:
fileID = fopen('File.txt');
[A,count] = fscanf(fileID,'%c'); % A is the input string.
fclose(fileID);

%% Counting Frequencies: 

% Initialization:
charecter = A(1); 
frequency = 1;
index = 1;

% Detecting the distinct charecters and their frequencies:
for k = 2:count
    for kk = 1:index
        if A(k) == charecter(kk) && kk ~= index
            frequency(kk) = frequency(kk) + 1;
            break;
        elseif kk == index 
            if A(k) == charecter(kk)
                frequency(kk) = frequency(kk) + 1;
            elseif A(k) ~= charecter(kk)
                charecter = [charecter; A(k)];
                frequency = [frequency; 1];
                index = index + 1;
            end
        end
    end
end

N = length(frequency); % No. of distinct charecters in the input file.

% Initializing some frequently used variables:
NULL = [];
emptyString = "";

%% Constructing Huffman Tree:

% Generating leaves for the distinct charecters: 
% Each leaf node has the charecter as 'node', frequency of that charecter as 'value' and empty array as the 'Children'.
for k = 1:N
    Nodes(k) = struct('node',charecter(k),'value',frequency(k),'leftChild',NULL,'rightChild',NULL);
end

% Calling function to build the Huffman Tree of the leaves:
% Input arguments are the leaves and the total number of leaves.
Tree = HuffmanTree(Nodes,N);

%% Constructing Huffman Code:

% Calling function to assign Huffman Codes to the leaves in the Huffman Tree:
% Input arguments are the Huffman Tree, leaves, codeword string for the particular node and the Huffman Code generated by far.
Code = HuffmanCode(Tree,Nodes,emptyString,NULL);

% Calling function to sort the Huffman Code in the decreasing order of frequencies:
% Input arguments are the Huffman Code obtained and the number of distinct charecters in the input file.
% Sorting in increasing order of frequencies is useful for encoding the file later.
Code = sorted_Code(Code,N);

% Generating arrays of Charecters, their frequencies and Codes with the decreasing order of frequencies as reference.
for k = 1:N
    Charecter(N-k+1,1) = Code(k).charecter;
    CODE(N-k+1,1) = Code(k).code;
    Frequency(N-k+1,1) = Code(k).frequency;
end

% Probabilty Distribution of the Huffman Code:
Probability = Frequency./sum(Frequency);

% Generating the Code File:
% 'table()', 'disp()' and 'writetable' are inbuilt MATLAB functionS.
T = table(Charecter,CODE,Frequency);
disp(T);
writetable(T,'Code.txt');

%% Encoding Data:

% Initializing the Encoded string:
Encoded = emptyString;

% Encoding the input file string 'A' to the string 'Encoded':
% Iteratively checking for the charecter of the Code struct to match the input file charecter.
for k = 1:count
   for kk = 1:N
       if Code(kk).charecter == A(k)
           Encoded = Encoded + Code(kk).code;
           break;
       end
   end
end

% Generating the Encoded file for the given Input file:
fileID = fopen('Encoded.txt','W');
nbytes = fprintf(fileID,Encoded); 
fclose(fileID);

%% Decoding Data:

% Loading the Encoded file:
fileID = fopen('Encoded.txt');
B = fscanf(fileID,'%c');
fclose(fileID);

% Calling function to decode the encoded file:
% Input arguments are the Encoded string, Code, no. of charecters in Encoded string, count of no. of charecters of decoded upto now, string to be decoded and Decoded string.
Decoded = Decode(B,Code,nbytes,1,B(1),emptyString);

% Generating the coresponding Decoded file:
fileID = fopen('Decoded.txt','W');
fprintf(fileID,Decoded);
fclose(fileID);

%% Verifying:

disp('Input');
disp(A);
disp('Decoded');
disp(Decoded);